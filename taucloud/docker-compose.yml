version: '3.8'

services:
  # TauCloud Frontend (Next.js)
  taucloud-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: taucloud-frontend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://taucloud-backend:3001
      - NEXT_PUBLIC_STORAGE_URL=http://minio:9000
    depends_on:
      - taucloud-backend
      - redis
    networks:
      - taucloud-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.taucloud-frontend.rule=Host(`cloud.arholdings.group`)"
      - "traefik.http.routers.taucloud-frontend.tls=true"
      - "traefik.http.routers.taucloud-frontend.tls.certresolver=letsencrypt"
      - "traefik.http.services.taucloud-frontend.loadbalancer.server.port=3000"

  # TauCloud Backend (Node.js/Express)
  taucloud-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: taucloud-backend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATABASE_URL=postgresql://taucloud:taucloud@postgres:5432/taucloud
      - REDIS_URL=redis://redis:6379
      - MINIO_ENDPOINT=minio
      - MINIO_PORT=9000
      - MINIO_ACCESS_KEY=taucloud_access_key
      - MINIO_SECRET_KEY=taucloud_secret_key_2025
      - MINIO_BUCKET=taucloud-files
      - JWT_SECRET=taucloud_jwt_secret_2025
      - JWT_EXPIRES_IN=1h
      - REFRESH_TOKEN_SECRET=taucloud_refresh_secret_2025
      - REFRESH_TOKEN_EXPIRES_IN=7d
      - CORS_ORIGIN=https://cloud.arholdings.group
    depends_on:
      - postgres
      - redis
      - minio
    networks:
      - taucloud-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.taucloud-api.rule=Host(`cloud.arholdings.group`) && PathPrefix(`/api`)"
      - "traefik.http.routers.taucloud-api.tls=true"
      - "traefik.http.routers.taucloud-api.tls.certresolver=letsencrypt"
      - "traefik.http.services.taucloud-api.loadbalancer.server.port=3001"

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: taucloud-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: taucloud
      POSTGRES_USER: taucloud
      POSTGRES_PASSWORD: taucloud_secure_password_2025
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - taucloud-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: taucloud-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass taucloud_redis_password_2025
    volumes:
      - redis_data:/data
    networks:
      - taucloud-network

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: taucloud-minio
    restart: unless-stopped
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: taucloud_access_key
      MINIO_ROOT_PASSWORD: taucloud_secret_key_2025
      MINIO_BROWSER_REDIRECT_URL: https://cloud.arholdings.group
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - taucloud-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.taucloud-minio.rule=Host(`cloud.arholdings.group`) && PathPrefix(`/minio`)"
      - "traefik.http.routers.taucloud-minio.tls=true"
      - "traefik.http.routers.taucloud-minio.tls.certresolver=letsencrypt"
      - "traefik.http.services.taucloud-minio.loadbalancer.server.port=9000"

  # Traefik for SSL and Load Balancing
  traefik:
    image: traefik:v2.10
    container_name: taucloud-traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./traefik/dynamic.yml:/etc/traefik/dynamic.yml:ro
      - certbot-etc:/etc/letsencrypt:ro
    networks:
      - taucloud-network

  # Certbot for SSL Certificates
  certbot:
    image: certbot/certbot
    container_name: taucloud-certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
    command: certonly --webroot --webroot-path=/var/www/html --email admin@arholdings.group --agree-tos --no-eff-email -d cloud.arholdings.group
    depends_on:
      - traefik
    networks:
      - taucloud-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: taucloud-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - taucloud-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: taucloud-grafana
    restart: unless-stopped
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=taucloud_grafana_password_2025
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - taucloud-network

  # Nginx for static file serving
  nginx:
    image: nginx:alpine
    container_name: taucloud-nginx
    restart: unless-stopped
    ports:
      - "8080:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - certbot-etc:/etc/letsencrypt:ro
    depends_on:
      - taucloud-frontend
      - taucloud-backend
    networks:
      - taucloud-network

volumes:
  postgres_data:
  redis_data:
  minio_data:
  prometheus_data:
  grafana_data:
  certbot-etc:
  certbot-var:

networks:
  taucloud-network:
    driver: bridge 